package com.gringots.dao.Customer;

import com.gringots.model.request.CommonResponseDto;
import com.gringots.model.request.CustomerRequestDto;
import com.gringots.model.response.IndividualResponseDto;
import com.gringots.model.response.OrganizationResponseDto;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.io.UnsupportedEncodingException;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

@Repository
public class CustomerDaoImpl implements CustomerDao {

    @Autowired DataSource dataSource;
    @Override
    public CommonResponseDto customerAlreadyExist(String email) {
        CommonResponseDto commonResponseDto = new CommonResponseDto();
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement preparedStatement = connection
                    .prepareStatement("select * from customer where email = ?");
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                commonResponseDto.setQuerySuccesful(true);
                commonResponseDto.setResponseObject(resultSet.getInt("customer_id"));
            }else {
                commonResponseDto.setQuerySuccesful(false);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return commonResponseDto;
    }

    @Override
    public CommonResponseDto createCustomer(String customerType, String address, String phoneNumber, String nicImage, String email) throws SQLException, UnsupportedEncodingException {
        return null;
    }

//    @Override
//    public CommonResponseDto createCustomer(String customerType, String address, String phoneNumber, String nicImage,
//            String email) throws SQLException, UnsupportedEncodingException {
//
//        //customerAlreadyExist(email);
//
//        CommonResponseDto commonResponseDto = new CommonResponseDto();
//
//        if (!customerAlreadyExist(email)){
//        byte[] byteData = nicImage.getBytes("UTF-8");// Better to specify encoding
//        Blob blob = new SerialBlob(byteData);
//
//        Connection connection = dataSource.getConnection();
//
//        PreparedStatement preparedStatement = connection.prepareStatement(
//                "insert into customer (customer_type,address,phone_number,nic_image,email) " + "values (?,?,?,?,?)",
//                Statement.RETURN_GENERATED_KEYS);
//
//        preparedStatement.setString(1, customerType);
//        preparedStatement.setString(2, address);
//        preparedStatement.setString(3, phoneNumber);
//        preparedStatement.setBlob(4, blob);
//        //preparedStatement.setString(5, email);
//
//            //preparedStatement.executeUpdate();
//
//        commonResponseDto.setQuerySuccesful(preparedStatement.executeUpdate() > 0);
//        ResultSet tableKeys = preparedStatement.getGeneratedKeys();
//        tableKeys.next();
//        int autoGeneratedID = tableKeys.getInt(1);
//            System.out.println("autoGeneratedID: " + autoGeneratedID);
//        commonResponseDto.setGeneratedKey(autoGeneratedID);
//    }
//        return commonResponseDto;
//    }

    @Override
    public CommonResponseDto createIndividual(String firstName, String lastName, String nic, String dob, int recordId)
            throws SQLException {
        CommonResponseDto commonResponseDto = null;
        Connection connection = dataSource.getConnection();
        PreparedStatement preparedStatement = connection.prepareStatement(
                "insert into individual(first_name,last_name,nic,dob) values (?,?,?,?)",
                Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, firstName);
        preparedStatement.setString(2, lastName);
        preparedStatement.setString(3, nic);
        preparedStatement.setDate(4, null);

        ResultSet tableKeys = preparedStatement.getGeneratedKeys();
        tableKeys.next();
        commonResponseDto.setQuerySuccesful(preparedStatement.executeUpdate() > 0);

        return commonResponseDto;
    }

    @Override
    public CommonResponseDto createUsingProcedures(CustomerRequestDto customerRequestDto) throws SQLException, ParseException {
        Connection connection = dataSource.getConnection();
        CallableStatement stmt = connection.prepareCall("{CALL insert_customer(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");

        stmt.setString(1, customerRequestDto.getCustomerType());
        stmt.setString(2, customerRequestDto.getAddress());
        stmt.setString(3, customerRequestDto.getPhoneNumber());
        stmt.setString(4, customerRequestDto.getEmail());
        stmt.setString(5, customerRequestDto.getFirstName());
        stmt.setString(6,customerRequestDto.getLastName() );
        stmt.setString(7, customerRequestDto.getNic());

        SimpleDateFormat sdf1 = new SimpleDateFormat("dd-mm-yyyy");
        if(customerRequestDto.getDob()!=null){
        java.util.Date date = sdf1.parse(customerRequestDto.getDob());
        java.sql.Date sqlDob = new java.sql.Date(date.getTime());
        stmt.setDate(8, sqlDob);}
        else{
            stmt.setDate(8, null);
        }

        stmt.setString(9, customerRequestDto.getPassword());
        stmt.setString(10, customerRequestDto.getContactPersonName());
        stmt.setString(11, customerRequestDto.getOrganizationRegNo());
        stmt.registerOutParameter(12, Types.INTEGER);
        stmt.executeUpdate();
        CommonResponseDto commonResponseDto = new CommonResponseDto();

        if(stmt.getInt(12) == 0){
            commonResponseDto.setQuerySuccesful(true);
            commonResponseDto.setResponseCode("200");
            commonResponseDto.setResponseMessage("customer created");


        }
        else{
            commonResponseDto.setQuerySuccesful(false);
            commonResponseDto.setResponseCode("400");
            commonResponseDto.setResponseMessage("customer not created");
        } ;

        // Close resources (Connection, CallableStatement, etc.) in a finally block.
        // This code should be within a try-catch-finally block for proper exception handling and resource management.
        return commonResponseDto;
    }


    //@Override
    public void createUsingProcedures() throws SQLException, UnsupportedEncodingException {
        Connection connection = dataSource.getConnection();



        CallableStatement stmt = connection.prepareCall("{CALL insert_customer(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");

        stmt.setString(1, "individual");
        stmt.setString(2, "123 Main Street");
        stmt.setString(3, "123456789");
        stmt.setString(5, "dila@google.com");
        stmt.setString(6, "John");
        stmt.setString(7, "Doe");
        stmt.setString(8, "123456789");
        stmt.setDate(9, null);
        stmt.setString(10, "Jane Smith");
        stmt.setString(11, "456789");
        stmt.setString(12, "orgreg");
        //stmt.registerOutParameter(13, Types.BIGINT);

        System.out.println(stmt.executeUpdate() > 0);

        // Close resources (Connection, CallableStatement, etc.) in a finally block.
        // This code should be within a try-catch-finally block for proper exception handling and resource management.
    }

    @Override
    public CommonResponseDto login(String email) throws SQLException {
        Connection connection = dataSource.getConnection();
        PreparedStatement stmt =
                connection.prepareStatement("SELECT pw_hash FROM customer_credentials where email=?");
        stmt.setString(1,email);
        ResultSet resultSet = stmt.executeQuery();
        CommonResponseDto commonResponseDto = new CommonResponseDto();
        if(resultSet.next()){
            commonResponseDto.setQuerySuccesful(true);
            commonResponseDto.setResponseCode("200");
            commonResponseDto.setResponseMessage("credential found");
            commonResponseDto.setResponseObject(new String(resultSet.getString("pw_hash")));
        }
        else{
            commonResponseDto.setQuerySuccesful(false);
            commonResponseDto.setResponseCode("404");
            commonResponseDto.setResponseMessage("credential not found");
        }

        return commonResponseDto;
    }

    @Override
    public IndividualResponseDto getIndividualByid(long customerId) throws SQLException {
        IndividualResponseDto individualResponseDto = new IndividualResponseDto();

        Connection connection = dataSource.getConnection();
        String sql = "SELECT * FROM individual WHERE individual_id=? ";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setLong(1,customerId);
        ResultSet resultSet = statement.executeQuery();
        //System.out.println(resultSet.getString(2));
        if(resultSet.next()){
            individualResponseDto.setFirstName(resultSet.getString("first_name"));

            individualResponseDto.setLastName(resultSet.getString("last_name"));
            individualResponseDto.setNic(resultSet.getString("nic"));
            individualResponseDto.setDob(resultSet.getDate("dob"));

        }
        return individualResponseDto;
    }

    @Override
    public OrganizationResponseDto getOrganizationByid(long customerId) throws SQLException {
        OrganizationResponseDto organizationResponseDto = new OrganizationResponseDto();
        Connection connection = dataSource.getConnection();
        String sql = "SELECT * FROM gringots_bk.organization WHERE organization_id=? ";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setLong(1,customerId);
        ResultSet resultSet = statement.executeQuery();

        if(resultSet.next()){
            organizationResponseDto.setOrgName(resultSet.getString("name"));
            organizationResponseDto.setOrgRegnum(resultSet.getString("organization_reg_no"));
            //organizationResponseDto.setContactPersonName(resultSet.getString("contact_person_name"));
        }

        return organizationResponseDto;
    }

    @Override
    public CommonResponseDto getAccountCustomerbyEmail(String email) throws SQLException {
        Connection connection =dataSource.getConnection();
        String sql = "SELECT account_no FROM getdatabyemail WHERE email = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1,email);
        ResultSet resultSet = statement.executeQuery();
        CommonResponseDto commonResponseDto = new CommonResponseDto();
        if(resultSet.next()){
            commonResponseDto.setQuerySuccesful(true);
            commonResponseDto.setResponseCode("200");
            commonResponseDto.setResponseMessage("account found");
            commonResponseDto.setResponseObject(resultSet.getLong("account_no"));
        }
        else{
            commonResponseDto.setQuerySuccesful(false);
            commonResponseDto.setResponseCode("404");
            commonResponseDto.setResponseMessage("account not found");
        }
        return commonResponseDto;
    }



    /* public void createUsingProcedures(CustomerRequestDto customerRequestDto) throws SQLException, UnsupportedEncodingException {
        Connection connection = dataSource.getConnection();

        byte[] byteData = customerRequestDto.getNicImage().getBytes("UTF-8");// Better to specify encoding
        Blob blob = new SerialBlob(byteData);

        CallableStatement stmt= connection.prepareCall("{CALL insert_customer(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");

        stmt.setString(1,customerRequestDto.getCustomerType());
        stmt.setString(2,customerRequestDto.getAddress());
        stmt.setString(3,customerRequestDto.getNic());
        stmt.setBlob(4,blob);
        stmt.setString(5,customerRequestDto.getEmail());
        stmt.setString(6,customerRequestDto.getFirstName());
        stmt.setString(7,customerRequestDto.getLastName());
        stmt.setString(8,customerRequestDto.getNic());
        stmt.setDate(9,null);
        stmt.setString(10,customerRequestDto.getContactPersonName());
        stmt.setString(11,customerRequestDto.getOrganizationRegNo());
        stmt.setString(12,customerRequestDto.getPassword());
        stmt.registerOutParameter(13, Types.BIGINT);
        System.out.println(stmt.executeUpdate()>0);





    }
*/



    @Override
    public void setAutoCommit(boolean b) throws SQLException {
        Connection connection = dataSource.getConnection();
        connection.setAutoCommit(b);
    }

    @Override
    public void commit() throws SQLException {

    }

    @Override
    public void rollback() throws SQLException {

    }



}
