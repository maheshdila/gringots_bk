package com.gringots.dao;

import com.gringots.model.request.CommonResponseDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import javax.sql.rowset.serial.SerialBlob;
import java.io.UnsupportedEncodingException;
import java.sql.*;
import java.util.HashMap;

@Repository
public class CustomerDaoImpl implements CustomerDao {

    @Autowired
    DataSource dataSource;


    @Override
    public boolean customerAlreadyExist(String email) {
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement preparedStatement = connection
                    .prepareStatement("select * from customer where email = ?");
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
              //  System.out.println("exist");
                return true;
            }
            //System.out.println("not exist");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public CommonResponseDto createCustomer(String customerType, String address, String phoneNumber, String nicImage,
            String email) throws SQLException, UnsupportedEncodingException {

        customerAlreadyExist(email);

        CommonResponseDto commonResponseDto = new CommonResponseDto();

        if (!customerAlreadyExist(email)){
        byte[] byteData = nicImage.getBytes("UTF-8");// Better to specify encoding
        Blob blob = new SerialBlob(byteData);

        Connection connection = dataSource.getConnection();
        PreparedStatement preparedStatement = connection.prepareStatement(
                "insert into customer (customer_type,address,phone_number,nic_image,email) " + "values (?,?,?,?,?)",
                Statement.RETURN_GENERATED_KEYS);

        preparedStatement.setString(1, customerType);
        preparedStatement.setString(2, address);
        preparedStatement.setString(3, "5551234567");
        preparedStatement.setBlob(4, blob);
        preparedStatement.setString(5, email);

        /*
         * ResultSet tableKeys = preparedStatement.getGeneratedKeys();
         * tableKeys.next();
         * int autoGeneratedID = tableKeys.getInt(1);
         *
         * commonResponseDto.setGeneratedKey(1);
         */
        commonResponseDto.setQuerySuccesful(preparedStatement.executeUpdate() > 0);
    }
        return commonResponseDto;
    }

    @Override
    public CommonResponseDto createIndividual(String firstName, String lastName, String nic, String dob, int recordId)
            throws SQLException {
        CommonResponseDto commonResponseDto = null;

        Connection connection = dataSource.getConnection();
        PreparedStatement preparedStatement = connection.prepareStatement(
                "insert into individual(first_name,last_name,nic,dob) values (?,?,?,?)",
                Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setString(1, firstName);
        preparedStatement.setString(2, lastName);
        preparedStatement.setString(3, nic);
        preparedStatement.setDate(4, null);

        ResultSet tableKeys = preparedStatement.getGeneratedKeys();
        tableKeys.next();
        commonResponseDto.setQuerySuccesful(preparedStatement.executeUpdate() > 0);

        return commonResponseDto;
    }

    @Override
    public CommonResponseDto createOrganization(String organizationName, String organizationRegNo,
            String contactPersonName, int recordId) throws SQLException {
        CommonResponseDto commonResponseDto = null;

        Connection connection = dataSource.getConnection();
        PreparedStatement preparedStatement = connection.prepareStatement(
                "insert into organization(organization_id,name,organization_reg_no,name_contact_person) values (?,?,?,?)",
                Statement.RETURN_GENERATED_KEYS);
        preparedStatement.setInt(1, recordId);
        preparedStatement.setString(2, organizationName);
        preparedStatement.setString(3, organizationRegNo);
        preparedStatement.setString(4, contactPersonName);

        ResultSet tableKeys = preparedStatement.getGeneratedKeys();
        tableKeys.next();
        int autoGeneratedID = tableKeys.getInt(1);

        commonResponseDto.setGeneratedKey(autoGeneratedID);
        commonResponseDto.setQuerySuccesful(preparedStatement.executeUpdate() > 0);

        return commonResponseDto;
    }
}
